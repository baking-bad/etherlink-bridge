{ parameter
    (or (nat %execute_outbox_message)
        (or (pair %create_outbox_message
               (pair %ticket_id (address %ticketer) (nat %token_id))
               (nat %amount)
               (bytes %routing_data)
               (option %router address))
            (or %rollup
               (or (pair %deposit (bytes %routing_info) (ticket %ticket (pair nat (option bytes))))
                   (bytes %b))
               (bytes %c)))) ;
  storage
    (pair (big_map %tickets
             (pair (address %ticketer) (nat %token_id))
             (ticket (pair nat (option bytes))))
          (big_map %messages
             nat
             (pair (pair %ticket_id (address %ticketer) (nat %token_id))
                   (nat %amount)
                   (bytes %routing_data)
                   (option %router address)))
          (nat %next_message_id)
          (big_map %metadata string bytes)) ;
  code { PUSH string "WRONG_ROLLUP_ENTRYPOINT" ;
         SWAP ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DROP ;
             SWAP ;
             UNPAIR 4 ;
             SWAP ;
             NONE (pair (pair address nat) nat bytes (option address)) ;
             DIG 5 ;
             GET_AND_UPDATE ;
             IF_NONE { PUSH string "MSG_NOT_FOUND" ; FAILWITH } {} ;
             UNPAIR 4 ;
             DIG 5 ;
             NONE (ticket (pair nat (option bytes))) ;
             DUP 3 ;
             GET_AND_UPDATE ;
             IF_NONE { PUSH string "TKT_NOT_FOUND" ; FAILWITH } {} ;
             READ_TICKET ;
             CDR ;
             CDR ;
             DUP 5 ;
             DUP 2 ;
             COMPARE ;
             GE ;
             IF { DUP 5 ; SWAP ; SUB ; ABS }
                { DROP ; PUSH string "TKT_INSUFFICIENT_AMOUNT" ; FAILWITH } ;
             DIG 4 ;
             PAIR ;
             SWAP ;
             SPLIT_TICKET ;
             IF_NONE { PUSH string "TKT_IRREDUCIBLE_AMOUNT" ; FAILWITH } {} ;
             UNPAIR ;
             DIG 4 ;
             UNPACK address ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             DIG 5 ;
             IF_NONE
               { CONTRACT (ticket (pair nat (option bytes))) ;
                 IF_NONE { PUSH string "FAILED_TO_GET_TKT_ENTRYPOINT" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 2 ;
                 TRANSFER_TOKENS }
               { CONTRACT %withdraw
                   (pair (address %receiver) (ticket %ticket (pair nat (option bytes)))) ;
                 IF_NONE { PUSH string "ROUTER_ENTRYPOINT_NOT_FOUND" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DIG 3 ;
                 PAIR ;
                 TRANSFER_TOKENS } ;
             DIG 6 ;
             DIG 6 ;
             DIG 6 ;
             DIG 5 ;
             DIG 5 ;
             SOME ;
             DIG 6 ;
             UPDATE ;
             PAIR 4 ;
             NIL operation ;
             DIG 2 ;
             CONS }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 UNPAIR 4 ;
                 PUSH nat 1 ;
                 DUP 4 ;
                 ADD ;
                 DIG 4 ;
                 SWAP ;
                 DIG 3 ;
                 DIG 5 ;
                 SOME ;
                 DIG 5 ;
                 UPDATE }
               { SWAP ;
                 UNPAIR 4 ;
                 DIG 4 ;
                 IF_LEFT
                   { IF_LEFT { DIG 5 ; DROP } { DROP ; DIG 4 ; FAILWITH } }
                   { DROP ; DIG 4 ; FAILWITH } ;
                 CDR ;
                 READ_TICKET ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 PAIR ;
                 DIG 2 ;
                 NONE (ticket (pair nat (option bytes))) ;
                 DUP 3 ;
                 GET_AND_UPDATE ;
                 IF_NONE
                   { DIG 2 }
                   { DIG 3 ;
                     PAIR ;
                     JOIN_TICKETS ;
                     IF_NONE { PUSH string "option is None" ; FAILWITH } {} } ;
                 SOME ;
                 DIG 2 ;
                 UPDATE ;
                 DUG 3 } ;
             DIG 3 ;
             PAIR 4 ;
             NIL operation } ;
         PAIR } }

