{ parameter
    (or (pair %default
           (nat %withdrawal_id)
           (ticket %ticket (pair nat (option bytes)))
           (timestamp %timestamp)
           (address %base_withdrawer)
           (bytes %payload)
           (bytes %l2_caller))
        (pair %purchase_withdrawal
           (pair %withdrawal
              (nat %withdrawal_id)
              (nat %withdrawal_amount)
              (timestamp %timestamp)
              (address %base_withdrawer)
              (bytes %payload)
              (bytes %l2_caller))
           (address %service_provider)
           (ticket %ticket (pair nat (option bytes))))) ;
  storage
    (pair (address %exchanger)
          (address %smart_rollup)
          (big_map %withdrawals
             (pair (nat %withdrawal_id)
                   (nat %withdrawal_amount)
                   (timestamp %timestamp)
                   (address %base_withdrawer)
                   (bytes %payload)
                   (bytes %l2_caller))
             address)) ;
  code { LAMBDA
           (pair address address (ticket (pair nat (option bytes))))
           operation
           { UNPAIR ;
             CONTRACT %burn (pair address (ticket (pair nat (option bytes)))) ;
             IF_NONE { PUSH string "Invalid tez ticket contract" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             DIG 2 ;
             TRANSFER_TOKENS } ;
         SWAP ;
         UNPAIR ;
         IF_LEFT
           { UNPAIR 6 ;
             SWAP ;
             READ_TICKET ;
             CDR ;
             CDR ;
             DIG 6 ;
             DIG 6 ;
             DIG 6 ;
             DIG 6 ;
             DIG 4 ;
             DIG 6 ;
             PAIR 6 ;
             SWAP ;
             DUP 3 ;
             GET 3 ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "Sender is not allowed to call this entrypoint" ; FAILWITH }
                {} ;
             READ_TICKET ;
             CAR ;
             DUP 4 ;
             CAR ;
             SWAP ;
             COMPARE ;
             NEQ ;
             IF { DROP ; PUSH string "Wrong ticketer" ; FAILWITH } {} ;
             DUP 3 ;
             GET 4 ;
             NONE address ;
             DUP 4 ;
             GET_AND_UPDATE ;
             DIG 2 ;
             SWAP ;
             IF_NONE { DIG 2 ; GET 7 } { DIG 3 ; DROP } ;
             PAIR ;
             DUP 3 ;
             CAR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DUG 2 ;
             UPDATE 4 }
           { UNPAIR 3 ;
             DIG 2 ;
             READ_TICKET ;
             CAR ;
             DUP 5 ;
             CAR ;
             SWAP ;
             COMPARE ;
             NEQ ;
             IF { DROP ; PUSH string "Wrong ticketer" ; FAILWITH } {} ;
             READ_TICKET ;
             CDR ;
             CDR ;
             DUP 3 ;
             GET 9 ;
             SWAP ;
             PACK ;
             COMPARE ;
             NEQ ;
             IF { DROP ; PUSH string "Invalid discounted amount or payload." ; FAILWITH }
                {} ;
             DUP 4 ;
             GET 4 ;
             DUP 3 ;
             GET ;
             IF_NONE { PUSH bool False } { DROP ; PUSH bool True } ;
             IF { PUSH string "The fast withdrawal was already payed" ; FAILWITH } {} ;
             DUP 2 ;
             GET 7 ;
             PAIR ;
             DUP 4 ;
             CAR ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUP 4 ;
             DIG 4 ;
             GET 4 ;
             DIG 4 ;
             SOME ;
             DIG 4 ;
             UPDATE ;
             UPDATE 4 } ;
         NIL operation ;
         DIG 2 ;
         CONS ;
         PAIR } }

