{ parameter
    (or (or (pair %create_outbox_message
               (pair (nat %amount) (option %router address))
               (bytes %routing_data)
               (pair %ticket_id (address %ticketer) (nat %token_id)))
            (nat %execute_outbox_message))
        (or %rollup
           (or (pair %deposit (bytes %routing_info) (ticket %ticket (pair nat (option bytes))))
               (bytes %b))
           (bytes %c))) ;
  storage
    (pair (pair (big_map %messages
                   nat
                   (pair (pair (nat %amount) (option %router address))
                         (bytes %routing_data)
                         (pair %ticket_id (address %ticketer) (nat %token_id))))
                (big_map %metadata string bytes))
          (nat %next_message_id)
          (big_map %tickets
             (pair (address %ticketer) (nat %token_id))
             (ticket (pair nat (option bytes))))) ;
  code { PUSH string "WRONG_ROLLUP_ENTRYPOINT" ;
         SWAP ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DROP ;
             IF_LEFT
               { SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 UNPAIR ;
                 PUSH nat 1 ;
                 DUP 2 ;
                 ADD ;
                 DIG 2 ;
                 SWAP ;
                 PAIR ;
                 DIG 3 ;
                 DIG 3 ;
                 DIG 4 ;
                 SOME ;
                 DIG 4 ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 NIL operation }
               { SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 UNPAIR ;
                 DIG 2 ;
                 NONE (pair (pair nat (option address)) bytes (pair address nat)) ;
                 DIG 5 ;
                 GET_AND_UPDATE ;
                 IF_NONE { PUSH string "MSG_NOT_FOUND" ; FAILWITH } {} ;
                 UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 UNPAIR ;
                 DIG 6 ;
                 NONE (ticket (pair nat (option bytes))) ;
                 DUP 4 ;
                 GET_AND_UPDATE ;
                 IF_NONE { PUSH string "TKT_NOT_FOUND" ; FAILWITH } {} ;
                 READ_TICKET ;
                 CDR ;
                 CDR ;
                 DUP 6 ;
                 DUP 2 ;
                 COMPARE ;
                 GE ;
                 IF { DUP 6 ; SWAP ; SUB ; ABS }
                    { DROP ; PUSH string "TKT_INSUFFICIENT_AMOUNT" ; FAILWITH } ;
                 DIG 5 ;
                 PAIR ;
                 SWAP ;
                 SPLIT_TICKET ;
                 IF_NONE { PUSH string "TKT_IRREDUCIBLE_AMOUNT" ; FAILWITH } {} ;
                 UNPAIR ;
                 DIG 3 ;
                 UNPACK address ;
                 IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                 DIG 5 ;
                 IF_NONE
                   { CONTRACT (ticket (pair nat (option bytes))) ;
                     IF_NONE { PUSH string "FAILED_TO_GET_TKT_ENTRYPOINT" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     TRANSFER_TOKENS }
                   { CONTRACT %withdraw
                       (pair (address %receiver) (ticket %ticket (pair nat (option bytes)))) ;
                     IF_NONE { PUSH string "ROUTER_ENTRYPOINT_NOT_FOUND" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     TRANSFER_TOKENS } ;
                 DUG 2 ;
                 SOME ;
                 DIG 3 ;
                 UPDATE ;
                 DIG 3 ;
                 PAIR ;
                 DIG 3 ;
                 DIG 3 ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 CONS } }
           { SWAP ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DIG 4 ;
             IF_LEFT
               { IF_LEFT { DIG 5 ; DROP } { DROP ; DIG 4 ; FAILWITH } }
               { DROP ; DIG 4 ; FAILWITH } ;
             CDR ;
             READ_TICKET ;
             UNPAIR ;
             SWAP ;
             CAR ;
             CAR ;
             SWAP ;
             PAIR ;
             DIG 3 ;
             NONE (ticket (pair nat (option bytes))) ;
             DUP 3 ;
             GET_AND_UPDATE ;
             IF_NONE
               { DIG 2 }
               { DIG 3 ;
                 PAIR ;
                 JOIN_TICKETS ;
                 IF_NONE { PUSH string "option is None" ; FAILWITH } {} } ;
             SOME ;
             DIG 2 ;
             UPDATE ;
             SWAP ;
             PAIR ;
             DUG 2 ;
             PAIR ;
             PAIR ;
             NIL operation } ;
         PAIR } }

